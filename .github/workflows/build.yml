name: Build
on: [push]
jobs:
  build_llvm_windows:
    name: Build LLVM Windows
    strategy:
      fail-fast: true
      matrix:
        llvm_version: [13, 14, 15]
    env:
      llvm_version_cmake: ${{ format('llvm_versions/llvm_{0}.cmake', matrix.llvm_version) }}
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Cache LLVM build output
        id: cache-llvm
        uses: actions/cache@v3
        with:
          key: llvm-Windows-${{ matrix.llvm_version }}-${{ hashFiles(env.llvm_version_cmake) }}
          path: .llvm_cache/bin/clang-format-${{ matrix.llvm_version }}*

      - name: Setup Visual C++ environment
        uses: ilammy/msvc-dev-cmd@v1
        if: ${{ !steps.cache-llvm.outputs.cache-hit }}

      - name: Build LLVM ${{ matrix.llvm_version }}
        run: cmake -DLLVM_MAJOR_VERSION=${{ matrix.llvm_version }} -P build_llvm.cmake
        if: ${{ !steps.cache-llvm.outputs.cache-hit }}

      - name: Upload build output
        uses: actions/upload-artifact@v3
        with:
          name: clang-format-Windows-${{ matrix.llvm_version }}
          path: .llvm_cache/bin/clang-format-${{ matrix.llvm_version }}*

  build_llvm_linux:
    name: Build LLVM Linux
    strategy:
      fail-fast: true
      matrix:
        image: ['ubuntu:18.04', 'ubuntu:20.04', 'ubuntu:22.04']
        llvm_version: [13, 14, 15]
    runs-on: ubuntu-latest
    container:
      image: docker.io/${{ matrix.image }}
      credentials:
        username: ${{ secrets.dockerhub_user }}
        password: ${{ secrets.dockerhub_password }}
    env:
      llvm_version_cmake: ${{ format('llvm_versions/llvm_{0}.cmake', matrix.llvm_version) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Transform image into valid key
        run: echo 'image_key=${{ matrix.image }}' | tr ':' '-' | tee -a $GITHUB_ENV
      
      - name: Cache LLVM build output
        id: cache-llvm
        uses: actions/cache@v3
        with:
          key: llvm-${{ env.image_key }}-${{ matrix.llvm_version }}-${{ hashFiles(env.llvm_version_cmake) }}
          path: .llvm_cache/bin/clang-format-${{ matrix.llvm_version }}*

      - name: Install dependencies
        if: ${{ !steps.cache-llvm.outputs.cache-hit }}
        run: ./setup-apt.sh

      - name: Build LLVM ${{ matrix.llvm_version }}
        run: cmake -DLLVM_MAJOR_VERSION=${{ matrix.llvm_version }} -P build_llvm.cmake
        if: ${{ !steps.cache-llvm.outputs.cache-hit }}

      - name: Upload build output
        uses: actions/upload-artifact@v3
        with:
          name: clang-format-${{ env.image_key }}-${{ matrix.llvm_version }}
          path: .llvm_cache/bin/clang-format-${{ matrix.llvm_version }}*

  build_package_windows:
    name: Build Package Windows
    needs: build_llvm_windows
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download pre-compiled clang-format 13
        uses: actions/download-artifact@v3
        with:
          name: clang-format-Windows-13
          path: .llvm_cache/bin

      - name: Download pre-compiled clang-format 14
        uses: actions/download-artifact@v3
        with:
          name: clang-format-Windows-14
          path: .llvm_cache/bin

      - name: Download pre-compiled clang-format 15
        uses: actions/download-artifact@v3
        with:
          name: clang-format-Windows-15
          path: .llvm_cache/bin

      - name: Setup Visual C++ environment
        uses: ilammy/msvc-dev-cmd@v1

      - name: Build project (Windows)
        run: |
          cmake --preset msvc-release
          cmake --build build/msvc-release --target package

      - name: Upload package (.zip)
        uses: actions/upload-artifact@v3
        with:
          name: package-Windows-zip
          path: build/msvc-release/clang-format-autoversion-*-win64.zip

      - name: Upload package (.msi)
        uses: actions/upload-artifact@v3
        with:
          name: package-Windows-msi
          path: build/msvc-release/clang-format-autoversion-*-win64.msi

  build_package_linux:
    name: Build Package Linux
    needs: build_llvm_linux
    strategy:
      fail-fast: true
      matrix:
        image: ['ubuntu:18.04', 'ubuntu:20.04', 'ubuntu:22.04']
    runs-on: ubuntu-latest
    container:
      image: docker.io/${{ matrix.image }}
      credentials:
        username: ${{ secrets.dockerhub_user }}
        password: ${{ secrets.dockerhub_password }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Transform image into valid key
        run: echo 'image_key=${{ matrix.image }}' | tr ':' '-' | tee -a $GITHUB_ENV

      - name: Download pre-compiled clang-format 13
        uses: actions/download-artifact@v3
        with:
          name: clang-format-${{ env.image_key }}-13
          path: .llvm_cache/bin

      - name: Download pre-compiled clang-format 14
        uses: actions/download-artifact@v3
        with:
          name: clang-format-${{ env.image_key }}-14
          path: .llvm_cache/bin

      - name: Download pre-compiled clang-format 15
        uses: actions/download-artifact@v3
        with:
          name: clang-format-${{ env.image_key }}-15
          path: .llvm_cache/bin

      - name: Install Linux dependencies
        run: ./setup-apt.sh
        
      - name: Build project
        run: |
          cmake --preset gcc-release
          cmake --build build/gcc-release --target package

      - name: Upload package (.tar.gz)
        uses: actions/upload-artifact@v3
        with:
          name: package-${{ env.image_key }}-tgz
          path: build/gcc-release/clang-format-autoversion-*-Linux.tar.gz

      - name: Upload package (.deb)
        uses: actions/upload-artifact@v3
        with:
          name: package-${{ env.image_key }}-deb
          path: build/gcc-release/clang-format-autoversion_*_amd64.deb

  test_package_windows:
    name: Test Package Windows
    needs: build_package_windows
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download MSI installer
        uses: actions/download-artifact@v3
        with:
          name: package-Windows-msi
      
      - name: Test MSI package
        shell: cmd
        run: test\test_msi.bat clang-format-autoversion-*-win64.msi